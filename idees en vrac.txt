on peut stocker la quantité de gold du player dans la class player.
Et on override les méthodes addItem() ( ou addItemToInventory() ) pour que si on ajoute un item gold, il soit pas ajouté
    mais plutôt que l'attribut "richesse" soit modifié

ajouter un attribut description pour les objets




====================================

Des interfaces style :
    - Lookable (pour des pièces, items, portes, monstres, etc...)
    - Describable (un sous genre de lookable qui possède une desc)
    - Takable (pour des items par ex)
    - Lockable (pour des portes, chests, ...)
    - Talkable (pour les pnj)
    - Fightable (monstres)
    - Equipable (armes, clés, carte, lampe ? ...)
    - Consumable (potions, nourriture, etc...)



====================================

en fait il faudrait qu'on puisse faire les commandes du genre :

Look [Lookable]
Take [item]
Take [container] [Item]

Où container est un cadavre de monstre ou un coffre par example.


====================================

Il faudrait que 1e joueur possède en plus de son inventaire un slot d'item actif.
Et il faudrait une commande du genre :
Equip [item]
pour qu'il s'équipe de l'item et remette celui qui était équipé dans le sac
Comme ça on utilisera ce slot pour faire tous les checks pour :
    les portes verrouillées,
    l'arme équipée,
    l'item actif (s'il fait quelque chose)
Et la commande : "USE []" utilisera automatiquement cet item.
du coup on aurait :
Equip [cléBleu]
Use
> La porte bleu est ouverte

Est-ce que c'est vraiment utile ? ou alors on garde equip que pour les armes ?

dans tous les cas is faudrait une méthode dans le joueur avec un slot (slot vide = item "mains")

(renvoie vrai si on a un item équipé après l'opération)
pour boolean equip(Item item)
    si item pas equipable
        : false
    si on n'a pas l'item
        : false
    si on a l'item
        unequip();
        si vrai suppr de l'inv et ajout au slot
            true
        false

(renvoie vrai si le slot est vide après l'opération)
pour boolean unequip()
    si slot = "mains"
        : true
    si inv plein
        : false
    sinon : slot = "mains" et ajout à l'inventaire
        : true

====================================
pour use [item]
si item implements usable
-> player.equip(item) :
	Equipable temp = player.getEquiped()
	player.removeItem(item)
	player.equiped = item
	payer.additem(temp);
   player.use()

pour use [exit]
si item extends trucPourOuvrirExits
	alors exit.use(item)
	si réussi alors 

====================================

Pour les name et shortname des entités et des items: 
En fait comme à travers la console le joueur n'interagira qu'avec des shortNames,
est-ce que ce ne serait pas mieux de tester les égalités et de récupérer les items à travers leur shortname
du genre : 

(apl) apple : a red apple
> take apl

(apl) apple : a red apple was added to your inventory


====================================

il faudrait parler dans le rapport de la méthode hashcode() qu'on overwritte pas 
et que du coup ça rend impossible de stocker des entités dans une hashmap


====================================

Le joueur peut commencer avec un arc vide dans son invenetaire pour la démo par ex 

Arrow.use() -> rien
Arrow.use("Bow") -> player.getitem("bow").addPower(arrow.getPower);
USE ARROW BOW
> vous préparez votre arc pour la prochaine rencontre

====================================

LOOK Chest
> (CHEST) Chest : un vieux coffre
gold = 10
nb items = 3
	FOOD (tarti) tartiflette : une vieille recette, weight = 0.3, value = 1, restoration = 2
	WEAP (arrow) Arrow : a sharp arrow, weight = 0.1, value = 1, dammage = 3
	KEY  (blueK) Blue_Key : a bright blue key; 

TAKE CHEST tartiflette (ou TAKE tartiflette CHEST)
> vous prenez la tartiflette du coffre. 

TAKE CHEST
> vous prenez tout le contenu du chest


====================================

Il faut une méthode qui à la mort renvoie l'inventaire de l'entité
	if monster.isDead()
		place.addStaticContainer(monstre.getInventory());
		place.removeEntity(Monstre)

====================================

Pour passer d'une pièce à l'autre
World.pieceacutelle = nouvellepiece
player.placeactuelle = nouvellepiece;
anciennepiece.removeantity(player)
nouvellepiece.addentity(player);

====================================

Pour draw une pièce
	parcours des sorties
		dessin_mur_haut
	
	parcours de sa liste des entités
		skip le player
		dessin_mur_gauche + draw_entité + dessin_mur_droit
	dessin_milieu
	dessin_mur_bas

====================================

Faire une classe d'items abstract UsableItem extends Item implements Usable
qui contient Food, Key, Weapon
weapon.use() ça fera rien sauf si on a l'interface usable on anotherItem

====================================











